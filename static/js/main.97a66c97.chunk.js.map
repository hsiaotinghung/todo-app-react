{"version":3,"sources":["services/TodoService.js","components/TabControl.js","components/DoneButton.js","components/TodoItem.js","components/TodoList.js","components/AddNewTodo.js","components/TabView.js","components/Modal.js","components/TodoDetail.js","components/TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["apiClient","axios","create","baseURL","withCredentials","headers","Accept","timeout","get","todo","post","id","put","TabControl","props","className","map","view","key","onClick","switchTabView","handleClick","DoneButton","isDone","done","toggleDone","TodoItem","handleTodoClick","todoName","TodoList","todos","Fragment","AddNewTodo","useState","newTodo","setNewTodo","role","aria-label","onSubmit","event","preventDefault","addNewTodo","htmlFor","type","value","onChange","target","name","placeholder","TabView","filter","filterTodos","Modal","modalContentNode","useRef","showHideClassName","show","current","contains","stopPropagation","handleClose","ref","title","children","TodoDetail","setTodoName","todoDetail","setTodoDetail","useEffect","detail","updateTodo","setActiveTodo","rows","reducer","action","payload","index","Error","TodoApp","useReducer","dispatch","a","TodoService","result","data","fetchTodos","setView","selectedTodo","setSelectedTodo","todoToUpdate","newView","length","updateTodos","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.97a66c97.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst apiClient = axios.create({\n  baseURL: `http://localhost:4000`,\n  withCredentials: false, // This is the default\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json'\n  },\n  timeout: 10000\n})\n\nexport default {\n  getTodos() {\n    return apiClient.get('/todos')\n  },\n  getTodo(id) {\n    return apiClient.get('/todos/' + id)\n  },\n  postTodos(todo) {\n    return apiClient.post('/todos', todo)\n  },\n  putTodo(id, todo) {\n    return apiClient.put('/todos/' + id, todo)\n  }\n}\n","import React from 'react'\nimport './TabControl.css'\n\nexport default function TabControl(props) {\n  let views = ['all', 'active', 'done']\n  const handleClick = view => {\n    props.switchTabView(view)\n  }\n  return (\n    <div className=\"tabControlContainer\">\n      {views.map(view => {\n        return (\n          <span\n            className={`tab ${view === props.view ? 'active' : ''}`}\n            key={view}\n            onClick={() => handleClick(view)}\n          >\n            {view}\n          </span>\n        )\n      })}\n    </div>\n  )\n}\n","import React from 'react'\nimport './DoneButton.css'\n\nexport default function DoneButton(props) {\n  let isDone = props.done || false\n  return (\n    <div\n      className={`doneButton ${isDone ? 'complete' : ''}`}\n      onClick={props.toggleDone}\n    >\n      <span>{isDone ? '✔️' : ''}</span>\n    </div>\n  )\n}\n","import React from 'react'\nimport DoneButton from './DoneButton'\nimport './TodoItem.css'\n\nexport default function TodoItem(props) {\n  const todo = props.todo\n  const toggleDone = () => {\n    props.toggleDone(todo)\n  }\n  const handleClick = () => {\n    props.handleTodoClick(todo)\n  }\n  return (\n    <li className=\"todoItem\">\n      <DoneButton done={todo.done} toggleDone={toggleDone} />\n      <div className=\"todoName\" onClick={handleClick}>\n        {todo.todoName}\n      </div>\n    </li>\n  )\n}\n","import React from 'react'\nimport TodoItem from './TodoItem'\n\nexport default function TodoList(props) {\n  let todos = props.todos\n  return (\n    <React.Fragment>\n      {todos.map(todo => (\n        <TodoItem\n          todo={todo}\n          key={todo.id}\n          toggleDone={props.toggleDone}\n          handleTodoClick={props.handleTodoClick}\n        />\n      ))}\n    </React.Fragment>\n  )\n}\n","import React, { useState } from 'react'\nimport './AddNewTodo.css'\n\nexport default function AddNewTodo(props) {\n  const [newTodo, setNewTodo] = useState('')\n\n  const handleChange = event => {\n    setNewTodo(event.target.value)\n  }\n  const handleSubmit = event => {\n    event.preventDefault()\n    props.addNewTodo(newTodo)\n    setNewTodo('')\n  }\n\n  return (\n    <li className=\"addNewTodo\">\n      <div className=\"addIcon\">\n        <span role=\"img\" aria-label=\"addNewTodoIcon\">\n          ➕\n        </span>\n      </div>\n      <form className=\"addNewTodoForm\" onSubmit={handleSubmit}>\n        <label className=\"addNewTodoLabel\" htmlFor=\"newTodo\">\n          Add New\n        </label>\n        <input\n          className=\"addNewTodoInput\"\n          type=\"text\"\n          value={newTodo}\n          onChange={handleChange}\n          name=\"newTodo\"\n          placeholder=\"Add a new todo item\"\n        />\n        <input className=\"addButton\" type=\"submit\" value=\"Add\" />\n      </form>\n    </li>\n  )\n}\n","import React from 'react'\nimport TodoList from './TodoList'\nimport AddNewTodo from './AddNewTodo'\n\nimport './TabView.css'\n\nexport default function TabView(props) {\n  const filterTodos = (todos, view) => {\n    switch (view) {\n      case 'all':\n        return todos\n\n      case 'active':\n        return todos.filter(todo => !todo.done)\n\n      case 'done':\n        return todos.filter(todo => todo.done)\n\n      default:\n        return todos\n    }\n  }\n  return (\n    <React.Fragment>\n      <h2>Displaying {props.view} todos</h2>\n      <ul className=\"todoList\">\n        <TodoList\n          view={props.view}\n          todos={filterTodos(props.todos, props.view)}\n          toggleDone={props.toggleDone}\n          handleTodoClick={props.handleTodoClick}\n        />\n        <AddNewTodo addNewTodo={props.addNewTodo} />\n      </ul>\n    </React.Fragment>\n  )\n}\n","import React, { useRef } from 'react'\nimport './Modal.css'\n\nexport default function Modal(props) {\n  const modalContentNode = useRef()\n  const showHideClassName = props.show\n    ? 'modal display-block'\n    : 'modal display-none'\n  const handleContainerClick = event => {\n    if (modalContentNode.current.contains(event.target)) {\n      return\n    }\n    event.stopPropagation()\n    props.handleClose()\n  }\n  return (\n    <div className={showHideClassName} onClick={handleContainerClick}>\n      <section className=\"modal-main\" ref={modalContentNode}>\n        <h2>{props.title || ''}</h2>\n        <button className=\"closeButton\" onClick={props.handleClose}>\n          close\n        </button>\n        {props.children}\n      </section>\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport './TodoDetail.css'\n\nexport default function TodoDetail(props) {\n  const todo = props.todo\n  const [todoName, setTodoName] = useState('')\n  const [todoDetail, setTodoDetail] = useState('')\n  useEffect(() => {\n    setTodoName(todo.todoName || '')\n    setTodoDetail(todo.detail || '')\n  }, [todo])\n  const handleNameChange = event => {\n    setTodoName(event.target.value)\n  }\n  const handelDetailChange = event => {\n    setTodoDetail(event.target.value)\n  }\n  const handleSubmit = event => {\n    event.preventDefault()\n    props.updateTodo({\n      ...todo,\n      todoName,\n      detail: todoDetail\n    })\n    props.setActiveTodo({})\n  }\n  return (\n    <div>\n      <form className=\"todoDetailContainer\" onSubmit={handleSubmit}>\n        <div className=\"todoDetailName\">\n          <label htmlFor=\"todoDetailName\">Title:</label>\n          <input\n            name=\"todoDetailName\"\n            type=\"text\"\n            value={todoName}\n            onChange={handleNameChange}\n            className=\"todoDetailNameInput\"\n          ></input>\n        </div>\n        <div className=\"todoDescription\">\n          <label htmlFor=\"todoDescription\">Description:</label>\n          <textarea\n            name=\"todoDescription\"\n            value={todoDetail}\n            rows=\"10\"\n            onChange={handelDetailChange}\n            className=\"todoDescriptionTextarea\"\n          ></textarea>\n        </div>\n\n        <input className=\"todoDetailUpdate\" type=\"submit\" value=\"Update\" />\n      </form>\n    </div>\n  )\n}\n","import React, { useReducer, useEffect, useState } from 'react'\nimport TodoService from '../services/TodoService'\n\nimport TabControl from './TabControl'\nimport TabView from './TabView'\nimport Modal from './Modal'\nimport TodoDetail from './TodoDetail'\n\nfunction reducer(todos, action) {\n  switch (action.type) {\n    case 'fetch':\n      return action.payload\n    case 'add':\n      return [...todos, action.payload]\n    case 'update':\n      return todos.map((todo, index) => {\n        return todo.id === action.payload.id ? action.payload : todo\n      })\n    default:\n      throw new Error()\n  }\n}\nexport default function TodoApp() {\n  const [todos, dispatch] = useReducer(reducer, [])\n\n  useEffect(() => {\n    const fetchTodos = async () => {\n      const result = await TodoService.getTodos()\n      dispatch({ type: 'fetch', payload: result.data })\n    }\n    fetchTodos()\n  }, [])\n\n  const [view, setView] = useState('all')\n  const [selectedTodo, setSelectedTodo] = useState({})\n\n  const addNewTodo = newTodo => {\n    const updateTodos = async () => {\n      const result = await TodoService.postTodos({\n        id: todos.length + 1,\n        todoName: newTodo,\n        done: false\n      })\n      dispatch({ type: 'add', payload: result.data })\n    }\n    updateTodos()\n  }\n  const toggleDone = async todoToUpdate => {\n    const result = await TodoService.putTodo(todoToUpdate.id, {\n      ...todoToUpdate,\n      done: !todoToUpdate.done\n    })\n    dispatch({ type: 'update', payload: result.data })\n  }\n\n  const updateTodo = async todoToUpdate => {\n    const result = await TodoService.putTodo(todoToUpdate.id, todoToUpdate)\n    dispatch({ type: 'update', payload: result.data })\n  }\n\n  const switchTabView = newView => {\n    setView(newView)\n  }\n  const handleModalClose = () => {\n    setSelectedTodo({})\n  }\n  const setActiveTodo = todo => {\n    setSelectedTodo(todo)\n  }\n\n  return (\n    <div>\n      <h1>Todo App</h1>\n      <TabControl view={view} switchTabView={switchTabView} />\n      <TabView\n        view={view}\n        todos={todos}\n        addNewTodo={addNewTodo}\n        toggleDone={toggleDone}\n        handleTodoClick={setActiveTodo}\n      />\n      <Modal\n        show={!!selectedTodo.id}\n        title=\"Todo Detail\"\n        handleClose={handleModalClose}\n      >\n        <TodoDetail\n          todo={selectedTodo}\n          setActiveTodo={setActiveTodo}\n          updateTodo={updateTodo}\n        />\n      </Modal>\n    </div>\n  )\n}\n","import React from 'react'\nimport TodoApp from './components/TodoApp'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <section>\n        <TodoApp />\n      </section>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}